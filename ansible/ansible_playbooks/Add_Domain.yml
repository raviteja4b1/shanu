- name: Join server to specified domain
  hosts: all
    
  pre-tasks:
  #  - name: include variables
  #    include_vars:
  #      file:   global-vars/matrix.yml
  #    ignore_errors: yes
  #    no_log: true
    - name: read the matrix.csv
      read_csv: 
        path: /root/ansible/ansible_playbooks/matrix.csv
        key: Name
      register: matrix
      delegate_to: localhost
      
      vars:
        serverlist: "{{ matrix.dict.serverListNew.Value.split(',') }}"
       
  tasks:
    - name: Creating variable $AdminCheck
      win_shell: | 
        $AdminCheck = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
         
        if ($AdminCheck) {
         Write-Host "Admin Check Passed."
        } else {
         Write-Error "Admin Check Failed."
         break
        } 
      register: AdminCheck_out
      
    - debug: 
         msg: '{{ AdminCheck_out.stdout_lines }}'
      
    - name: Establishing PSSession with server
      win_shell:  |
        Write-Output "Establishing PSSession with {{ item }}"
        Invoke-Command -VMName {{ item }} -Credential $credlocal -ScriptBlock {
          $serversession = $env:Computername
          $servernew = $Using:server
          $joincred = $Using:creddomain
        
          Write-Output "Checking connectivity and IP configuration on $servernew."
          
          Write-Output "Checking connectivity and IP configuration on $servernew."
          
          #Validate IP settings and connectivity
          #Server will be DHCP, so values won't match matrix. This still should work though.
          $index = (Get-NetIPAddress | Where-Object {$_.InterfaceAlias -like "*STP*" -and $_.AddressFamily -eq "IPv4"}).InterfaceIndex
          
          if (!$index) {
              $index = (Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1).InterfaceIndex
              if (!$index) {
                  Write-Error "Could not find an active interface or one named `"STP`"."
                  break
              }
          }
          
          $config = Get-NetIPConfiguration -InterfaceIndex $index -Detailed
          $ip = $config.IPv4Address
          $gate = $config.IPv4DefaultGateway
          $dns = $config.DNSServer.ServerAddresses
          
          $test = (Test-NetConnection -ComputerName "stp-dc3.stp.local" -Port 53).TcpTestSucceeded
          
          if ($test) {
              Write-Output "Connectivity on virtual machine established."
              Write-Host "IP Address: $ip"
              Write-Host "DefaultGateway: $gate"
              Write-Host "DNS Servers: $dns"
          } else {
              Write-Warning "Could not establish connection to primary domain controller. Check VM network settings and connectivity."
              break
          }
          
          #Join server to domain.
          if ($serversession -eq $servernew) {
              Write-Output "Server names match. Adding $servernew to domain."
              if ({{ item }} -like '*sql*') {
                  $serverou = 'Retail SQL'
              } elseif ({{ item }} -like '*app*') {
                  $serverou = 'Retail OMS App Servers'
              } elseif ({{ item }} -like '*adc*') {
                  $serverou = 'Whalley Staging'  
              } else {
                  Add-Computer -DomainName stp.local -Credential $joincred -Restart
                  break
              }
              
              Add-Computer -DomainName stp.local -Credential $joincred -OUPath "OU=$serverou,OU=Retail,OU=Servers,DC=STP,DC=LOCAL" -Restart
          } else {
              Write-Error "Server $serverold does not match hostname $serversession."
              break
          }
        }
        
      when: ( serverlist is defined )  
      loop: "{{ serverlist }}"
      ignore_errors: yes
      register: PSSession
    
    - name: Wait for VM to shut down
      win_command:  Start-Sleep 30
      register: sleep_30
         
      
    - name: Check VM heartbeat status and wait for it to boot.
      win_shell:   |
         $state = (Get-VMIntegrationService -VMName {{ item }} | Where-Object {$_.Name -eq "Heartbeat"}).SecondaryStatusDescription
         $n = 0
         
         while (($state -ne "OK") -and ($n -le 25)) {
             Write-Host "Waiting for {{ item }} to boot."
             Start-Sleep 15
             $state = (Get-VMIntegrationService -VMName {{ item }} | Where-Object {$_.Name -eq "Heartbeat"}).SecondaryStatusDescription
             $n++
         }
         
         if ($n -eq 25) {
             Write-Error "Server hung on boot or heartbeat service failed to start.
             Please check server and try again."
             break
         }
      when: ( serverlist is defined )
      loop: "{{ serverlist }}"   
      ignore_errors: yes
      register: heartbeat
      
      
    - name: debug vm heartbeat
      debug:    
        msg: "{{ heartbeat }}"